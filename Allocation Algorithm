Public Class Form1
    Private Structure Element 'Defines the elements for a table for the Hungarian Algorithm.
        Public value As Integer
        Public numLines As Integer 'Stores how many time a line is drawn across an element (2 where 2 lines intersect, 1 or 0 elsewhere
    End Structure

    Dim table(,) As Element
    WriteOnly Property pTable() As Integer(,) 'Creates the table of instructors preferences and courses (by day). This is dynamic because the number of courses a week varies yaer by year.
        Set(value As Integer(,))
            ReDim table(value.GetLength(0) - 1, value.GetLength(1) - 1)
            For i = 1 To value.GetLength(0) - 1
                For j = 1 To value.GetLength(1) - 1
                    table(i, j).value = value(i, j)
                Next j
            Next i
        End Set
    End Property


    Public Sub AllocateInstructors()
        'Create Table
        Dim reduced As Boolean = False
        Dim numLines As Integer = 0
        Dim e As Integer
        Dim allocation(table.GetLength(0) - 1, table.GetLength(1) - 1) As Boolean 'If worker i does task j, allocation(i,j) = True
        Dim enoughWorkers As Boolean = False
        Dim numDummies As Integer

        'Check enoughWorkers
        If table.GetLength(0) >= table.GetLength(1) Then
            enoughWorkers = True
        End If
        If enoughWorkers Then
            'Add Dummies if there are more workers than jobs. A worker assigned to a dummy will not be given a job.
            If table.GetLength(0) > table.GetLength(1) Then
                numDummies = AddDummies()
            End If

            'Reduce Rows
            For i = 1 To table.GetLength(0) - 1
                For j = 1 To table.GetLength(1) - 1
                    If table(i, j).value = 0 Then 'If there is a zero in the row then it cannot be reduced.
                        reduced = True
                    End If
                Next j
                If Not reduced Then
                    ReduceRow(i)
                End If
                reduced = False
            Next i
            'Reduce Columns
            For i = 1 To table.GetLength(0) - 1
                For j = 1 To table.GetLength(1) - 1
                    If table(j, i).value = 0 Then 'See rows
                        reduced = True
                    End If
                Next j
                If Not reduced Then
                    ReduceColumn(i)
                End If
                reduced = False
            Next i
            'Do While Not Optimal
            Do While Not isOptimal(numLines)


                'Draw Line
                numLines = DecideLines(numLines)

                'Check Optimal - If the number of lines equas the number of workers then the solution is optimal
                If Not isOptimal(numLines) Then


                    'Find e
                    e = FindElement()
                    'Subtract e from uncovered elements
                    SubtractElement(e)
                    'Add e to double covered
                    AddElement(e)
                    'Remove Lines
                    RemoveLines()
                End If
            Loop
            'End Loop
            allocation = Allocate()
            'Remove Dummies
            If numDummies > 0 Then
                RemoveDummies(numDummies, allocation)
            End If
        Else
            'Tell user thereen't enough workers then end
            MsgBox("Error. There are not enough assisstant instructors.")
        End If
    End Sub

    Private Sub RemoveDummies(ByVal numToRemove As Integer, ByRef allocation(,) As Boolean)
        Dim tableCopy(allocation.GetLength(0) - 1, allocation.GetLength(1) - 1) As Boolean
        tableCopy = allocation
        ReDim allocation(allocation.GetLength(0) - (numToRemove + 1), allocation.GetLength(1) - (numToRemove + 1)) 'The dummies will be at the end of the array (The leftmost columns looking at the array like a table
        For i = 1 To allocation.GetLength(0) - 1                                                                   'This command cuts out the dummies from the table.
            For j = 1 To allocation.GetLength(1) - 1
                allocation(i, j) = tableCopy(i, j)
            Next j
        Next i

    End Sub

    Private Function AddDummies() As Integer
        Dim numToMake As Integer = table.GetLength(0) - table.GetLength(1)
        Dim column As Integer
        For i = 1 To numToMake
            column = table.GetLength(1)
            'Add a dummy job
            ReDim Preserve table(table.GetLength(0) - 1, table.GetLength(1))
            For j = 1 To table.GetLength(0) - 1
                table(j, column).value = 0
                'The cost of a dummy job = 0
            Next j
        Next i
        Return numToMake
    End Function

    Private Function Allocate() As Boolean(,)
        Dim workerTasks(table.GetLength(0) - 1, table.GetLength(1) - 1) As Boolean
        Dim matching(workerTasks.GetLength(0) - 1, workerTasks.GetLength(1) - 1) As Boolean
        Dim maximum As Boolean = False
        Dim path(1) As Integer 'Worker, Task alternating. Path(0) is a worker, path(1) is a task
        'Create Bipartite graph in table form
        For i = 1 To workerTasks.GetLength(0) - 1
            For j = 1 To workerTasks.GetLength(1) - 1
                If table(i, j).value = 0 Then 'If the relative cost of worker i performing task j is 0, worker i can perform task j
                    workerTasks(i, j) = True
                Else : workerTasks(i, j) = False
                End If
            Next j
        Next i

        'Initial Matching
        matching = InitialMatching(workerTasks)
        'Loop while Not maximum (maximum if no breakthrough)
        Do While Not maximum
            'improve matching
            maximum = Not ImproveMatching(matching, workerTasks, path)
            If Not maximum Then
                ReversePath(matching, path)
            End If
        Loop
        Return matching
    End Function

    Private Function ImproveMatching(ByRef matching(,) As Boolean, ByVal workerTasks(,) As Boolean, ByRef path() As Integer) As Boolean
        Dim breakthrough As Boolean = False
        Dim tempMatching(matching.GetLength(0) - 1, matching.GetLength(1) - 1) As Boolean
        Dim isFree((matching.GetLength(0) - 1) + (matching.GetLength(1) - 1)) As Boolean
        Dim ends() As Integer
        Dim start As Integer
        Dim isWorker As Boolean = True


        For i = 1 To isFree.Length - 1 'no worker is assigned yet
            isFree(i) = True
        Next i

        tempMatching = matching
        'Find starting point. First come first serve
        start = FindStart(matching)
        path(0) = start
        'Find ends
        ends = FindEnds(matching)
        breakthrough = Alternate(workerTasks, matching, start, isWorker, ends, isFree, path, 1, False)
        Return breakthrough
    End Function

    Private Sub ReversePath(ByRef matching(,) As Boolean, ByVal path() As Integer)
        Dim worker, task As Integer
        For i = 0 To path.Length / 2 Step 2
            worker = path(i)
            task = path(i + 1)
            For j = 1 To matching.GetLength(0) - 1
                'Clear worker and task
                matching(j, task) = False
                matching(worker, j) = False
            Next j
            'Add matching
            matching(worker, task) = True
        Next i

    End Sub

    Private Function Alternate(ByVal workerTasks(,) As Boolean, ByRef matching(,) As Boolean, ByVal start As Integer, ByVal isWorker As Boolean, ByVal ends() As Integer, ByRef isFree() As Boolean, ByRef path() As Integer, ByRef count As Integer, ByRef breakthrough As Boolean) As Boolean
        Dim numOptions As Integer
        Dim options(0) As Integer
        Dim current As Integer = start
        Dim isFreeCopy((matching.GetLength(0) - 1) + (matching.GetLength(1) - 1)) As Boolean
        Dim count2 As Integer = 0
        Dim maximum As Boolean = False

        isFreeCopy = isFree 'To be passed in the loop

        Do While Not breakthrough And Not maximum
            If isWorker Then
                isFree(start) = False
                isFreeCopy(start) = False
                'Find Options
                numOptions = 0
                For i = 1 To matching.GetLength(1) - 1 'If the selectd worker can do the task and the task hasn't already been taken, that task is an option
                    If workerTasks(current, i) And isFree(i + matching.GetLength(0) - 1) Then
                        options(options.Length - 1) = i
                        ReDim Preserve options(options.Length)
                        numOptions = numOptions + 1
                    End If
                Next i
                'Check for end
                For i = 0 To numOptions - 1
                    For j = 0 To ends.Length - 2 'If the worker can do a previously unallocated task, the new allocation has increased by a worker-task pair. A breakthrough has occured.
                        If options(i) = ends(j) Then
                            path(count) = options(i)
                            breakthrough = True
                        End If
                    Next j
                Next i
                'Choose next value
                Do While Not breakthrough And numOptions > 0 And count2 <= options.Length - 1 'If there was no breakthrough and there are still options available, test the next option.
                    'Update path
                    path(count) = options(count2)
                    ReDim Preserve path(count + 1)
                    'repeat for next value
                    breakthrough = Alternate(workerTasks, matching, options(count2), Not isWorker, ends, isFree, path, count + 1, breakthrough)
                Loop
                If Not breakthrough And count = 1 Then 'If no breakthroughs have occured, there are no options left and no possibility of backtracking, the solution is as good as it will get. This shouldn't ever happen because the hungarian algorithm should always provide a solvable solution, but it's better to e safe than sorry.
                    maximum = True
                End If
            Else 'Is not worker
                Dim found As Boolean = False
                'update isFree
                isFree(start + matching.GetLength(0) - 1) = False
                isFreeCopy(start + matching.GetLength(0) - 1) = False
                'Find next step
                Do Until found 'This is the worker to which this task is currently assigned.
                    count2 = count2 + 1
                    If workerTasks(count2, start) And isFree(count2) Then
                        found = True
                    End If
                Loop
                If found Then
                    'Update path
                    path(count) = count2
                    ReDim Preserve path(count + 1)
                    'repeat fo next value
                    If Not breakthrough Then
                        breakthrough = Alternate(workerTasks, matching, count2, Not isWorker, ends, isFreeCopy, path, count + 1, breakthrough)
                    End If
                End If
            End If
        Loop
        Return breakthrough
    End Function

    Private Function FindStart(ByVal matching(,) As Boolean) As Integer 'Find the first unassigned worker
        Dim start As Integer
        Dim match As Boolean = True
        For i = 1 To matching.GetLength(0) - 1
            If match Then
                match = False
                For j = 1 To matching.GetLength(1) - 1
                    If matching(i, j) Then
                        match = True
                    End If
                Next j
                If Not match Then
                    start = i
                End If
            End If
        Next i

        Return start
    End Function

    Private Function FindEnds(ByVal matching(,) As Boolean) As Integer() 'Finds all unassigned tasks
        Dim ends(0) As Integer
        Dim match As Boolean

        For i = 1 To matching.GetLength(0) - 1
            match = False
            For j = 1 To matching.GetLength(1) - 1
                If matching(j, i) Then
                    match = True
                End If
            Next j
            If Not match Then
                ends(ends.Length - 1) = i
                ReDim Preserve ends(ends.Length)
            End If
        Next i

        Return ends
    End Function

    Private Function InitialMatching(ByVal workerTasks(,) As Boolean) As Boolean(,)
        'First come, first serve
        Dim matching(workerTasks.GetLength(0) - 1, workerTasks.GetLength(1) - 1) As Boolean
        Dim tasks(workerTasks.GetLength(1) - 1) As Boolean
        Dim match As Boolean
        For i = 1 To workerTasks.GetLength(0) - 1
            match = False
            For j = 1 To workerTasks.GetLength(1) - 1
                If Not match And Not tasks(j) Then
                    If workerTasks(i, j) = True Then 'If worker i can do task j and neither have been assigned, they are assigned to each other. This gives a starting point for ImproveMatching
                        matching(i, j) = True
                        tasks(j) = True
                        match = True
                    End If
                End If
            Next j
            match = False
        Next i
        Return matching
    End Function

    Private Sub RemoveLines()
        For i = 1 To table.GetLength(0) - 1
            For j = 1 To table.GetLength(1) - 1
                table(i, j).numLines = 0
            Next j
        Next i
    End Sub

    Private Sub AddElement(ByVal e As Integer) 'Add e to all elements with two lines
        For i = 1 To table.GetLength(0) - 1
            For j = 1 To table.GetLength(1) - 1
                If table(i, j).numLines = 2 Then
                    table(i, j).value = table(i, j).value + e
                End If
            Next j
        Next i
    End Sub

    Private Sub SubtractElement(ByVal e As Integer) 'Subtract e from all uncovered elements
        For i = 1 To table.GetLength(0) - 1
            For j = 1 To table.GetLength(1) - 1
                If table(i, j).numLines = 0 Then
                    table(i, j).value = table(i, j).value - e
                End If
            Next j
        Next i
    End Sub

    Private Function FindElement() As Integer
        Dim e As Integer = 0
        'e must be larger than any of the uncovered elements. Rather than make e a large number, I have found the largest element (easier because there cannot be an element below 0) and added 1 to make e. This makes e less arbitrar-e
        For i = 1 To table.GetLength(0) - 1
            For j = 1 To table.GetLength(1) - 1
                If table(i, j).numLines = 0 And table(i, j).value <> 0 And table(i, j).value > e Then
                    e = table(i, j).value
                End If
            Next j
        Next i

        e = e + 1
        'Go through each element and record the smallest uncovered element
        For i = 1 To table.GetLength(0) - 1
            For j = 1 To table.GetLength(1) - 1
                If table(i, j).numLines = 0 And table(i, j).value <> 0 And table(i, j).value < e Then
                    e = table(i, j).value
                End If
            Next j
        Next i

        Return e
    End Function

    Private Function isOptimal(ByVal numLines As Integer) As Boolean
        Dim optimal As Boolean = False
        'If the number of lines is equal to the number of workers then the solution is optimal
        If numLines = table.GetLength(0) - 1 Then
            optimal = True
        End If
        Return optimal
    End Function

    Private Sub ReduceRow(ByVal row As Integer)
        Dim minVal As Integer
        'Find the smallest element in the row. Subtract this from every element in the row because the algorithm deals with relative values.
        minVal = table(row, 1).value
        For i = 2 To table.GetLength(0) - 1
            If table(row, i).value < minVal Then
                minVal = table(row, i).value
            End If
        Next i
        For i = 1 To table.GetLength(0) - 1
            table(row, i).value = table(row, i).value - minVal
        Next i
    End Sub

    Private Sub ReduceColumn(ByVal column As Integer)
        Dim minVal As Integer
        minVal = table(1, column).value
        For i = 2 To table.GetLength(1) - 1
            If table(i, column).value < minVal Then
                minVal = table(i, column).value
            End If
        Next i
        For i = 1 To table.GetLength(1) - 1
            table(i, column).value = table(i, column).value - minVal
        Next i
    End Sub

    Private Function DecideLines(ByVal numLines As Integer) As Integer
        Dim numZeros((table.GetLength(0) - 1) + (table.GetLength(1) - 1)) As Integer 'Rows then columns
        Dim count As Integer
        Dim numForLine As Integer = 0
        'Draw the line that will cover the most zeros. If tie, draw the first one.
        'Check rows
        For i = 1 To table.GetLength(0) - 1
            count = 0
            For j = 1 To table.GetLength(1) - 1
                If table(i, j).value = 0 And table(i, j).numLines = 0 Then 'count the number of uncovered 0s. 
                    count = count + 1
                End If
            Next j
            numZeros(i) = count
        Next i
        'Check columns
        For i = 1 To (numZeros.Length - 1) - (table.GetLength(0) - 1)
            count = 0
            For j = 1 To table.GetLength(0) - 1
                If table(j, i).value = 0 And table(j, i).numLines = 0 Then
                    count = count + 1
                End If
            Next j
            numZeros(i + table.GetLength(0) - 1) = count
        Next i

        'Find largest amount
        count = 0
        For i = 1 To numZeros.Length - 1
            If numZeros(i) > count Then
                count = numZeros(i)
                numForLine = i
            End If
        Next i

        'Draw Line
        If count > 0 Then
            If numForLine <= table.GetLength(0) - 1 Then
                DrawLine(True, numForLine)
            Else
                DrawLine(False, numForLine - (table.GetLength(0) - 1))
            End If
            numLines = numLines + 1
            'Repeat until count = 0
            DecideLines(numLines)
        End If

        Return numLines
    End Function

    Private Sub DrawLine(ByVal isRow As Boolean, ByVal num As Integer)
        If isRow Then 'Lines must be drawn across an entire row or column
            For i = 1 To table.GetLength(0) - 1
                table(num, i).numLines = table(num, i).numLines + 1
            Next i
        Else
            For i = 1 To table.GetLength(1) - 1
                table(i, num).numLines = table(i, num).numLines + 1
            Next i
        End If
    End Sub

End Class
